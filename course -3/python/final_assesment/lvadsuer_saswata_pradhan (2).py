# -*- coding: utf-8 -*-
"""LVADSUER_SASwata_Pradhan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rP-NLsuWXjPLym0xbrbciChFIrHAM9ic

#1a
"""

import pandas as pd


df=pd.read_csv('/content/Final Dataset - IPL.csv')
df

"""#b"""

#Shape of the dataset
print(df.shape)
#Types of the data
print(df.dtypes)
#checking null values
print(df.isnull().sum())
#describe the dataset
print(df.describe())

print(df.team1.unique())

df

print(df.isnull().sum())

print(df.shape)

print(df.dtypes)

print(df.isnull().sum())

print(df.describe())

print(df.team1.unique())

"""#2 . a"""

#checking missing values
missing_values = df.isnull().sum()
missing_values

"""# There is no missing values so we can not fill or drop the missing values. But if there are more than 70-80% missing values we generally drop the column if the column is not htat much important

#b
"""

#dropping duplicates
duplicate_rows = df[df.duplicated()]

df = df.drop_duplicates()

"""#3.

## Match id is not important
```
Avg score for the first_ings_score	first_ings_wkts	second_ings_score

second_ings_wkts	margin	highscore are as follows  mean	37.500000	171.121622

6.135135	158.540541	6.175676	16.972973	71.716216

where as standrad deviation for the same columns are std	21.505813	29.048355	2.

222699	29.299207	2.639832	19.651047	20.705052 from here we can understand how

the mean deviates from the median.

The central limit theory tells us in a standard normal distribution the mean is 1 and std is 0

```
"""

# .describe tell us regarding the descriptive statistics .
df.describe()

df[df['team1'] == 'Banglore'].groupby('team1')['first_ings_score'].sum()

runs_by_team = df.groupby('team1')['first_ings_score'].sum()
print(runs_by_team)

runs_by_team_first_inngs = df.groupby('team1')['first_ings_score'].sum()
print(runs_by_team_first_inngs)
runs_by_team_2nd__inngs=df.groupby('team2')['second_ings_score'].sum()
print(runs_by_team_2nd__inngs)



"""#4

"""

# Histogram for runs first inngs  scored by each team
df['first_ings_score'].hist(bins=10, edgecolor='black')

# Scatter plot to visualize the relationship between runs scored and overs played
df.plot.scatter(x='highscore', y='first_ings_score')

# Box plot to visualize the distribution of runs conceded by each team
df.boxplot(column='highscore', by='team1')

# Bar chart to compare the average runs scored by each team
df.groupby('team1')['first_ings_score'].mean().plot(kind='bar')

# Pie chart to visualize the distribution of matches played at different venues
df['venue'].value_counts().plot(kind='pie')

"""#5."""

df1

df.info()

df1 = df.copy()
df1['toss_decision'] = df1['toss_decision'].astype('category')
df1['toss_decision'] = df1['toss_decision'].cat.codes

df1=df1[['first_ings_score','toss_decision']]

# Calculate the correlation matrix for numerical columns
correlation_matrix = df1.corr()

print(correlation_matrix)



# Explore the relationship between innings score and match outcome using a scatter plot
plt.scatter(df1['first_ings_score'], df1['toss_decision'])
plt.xlabel('Innings Score')
plt.ylabel('Match Winner')
plt.show()

# Visualize the correlation matrix using a heatmap
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.show()

# Explore the relationship between venue and match outcome using a pie chart
df.groupby('venue')['match_winner'].value_counts().unstack().plot(kind='pie', subplots=True)
plt.show()

"""# 6. Outlier Detection"""

from scipy import stats

numerical_columns = ['first_ings_score', 'second_ings_score', 'margin', 'highscore', 'team1_totalscore']

# Calculate z-scores
z_scores = stats.zscore(df[numerical_columns])

#taking z-score > 3 or < -3)
threshold = 3

outlier_mask = (abs(z_scores) > threshold).any(axis=1)

# Outliers
outliers = df[outlier_mask]
outliers

"""### Decide whether to keep, remove, or handle outliers based on domain knowledge and context.
### If outliers are  extreme values, consider keeping them for analysis.
### If outliers are erroneous, consider removing or imputing them.

# 7.
"""

import matplotlib.pyplot as plt
import seaborn as sns


# - Team performance compare in different venues and stages.
# - Individual player performance compare across different matches and venues.
# - Impact of specific conditions on match outcomes.

plt.figure(figsize=(10, 6))
sns.boxplot(x='venue', y='margin', data=df)
plt.title('Impact of venue on  margin')
plt.xticks(rotation=90)
plt.xlabel('Venue')
plt.ylabel('Match margin')
plt.show()

"""#
#8.
"""

player_of_match_count = df['player_of_the_match'].value_counts()
top_players = player_of_match_count.head(5)

plt.figure(figsize=(8, 5))
top_players.plot(kind='bar')
plt.title('top 5 players with Most player of the Match Awards')
plt.xlabel('Player')
plt.ylabel('number of player of the match awards')
plt.show()

"""

# 9. Data Discovery Summary
```
Outlier Detection:
Used z-score method to identify outliers in numerical columns.
Outliers should be handled based on domain knowledge and context.
```
```
Performance Trends and Venue Impact:
Compared team and individual performances across different matches and venues.
Visualized impact of venue on match margin to understand venue influence on outcomes.
```
```
 Player Spotlight:
 Identified top players with the most Player of the Match awards.
Understanding top performers' impact helps in assessing their influence on match outcomes.
```"""






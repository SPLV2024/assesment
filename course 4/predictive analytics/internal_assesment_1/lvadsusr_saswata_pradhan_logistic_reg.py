# -*- coding: utf-8 -*-
"""LVADSUSR_Saswata_Pradhan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17r9xVYkX4wZHsfkSdMY66MQKeHoCnvMk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from scipy.stats import zscore
from sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score

data=pd.read_csv("/content/booking.csv")
df=pd.DataFrame(data)
df.head()

df.info()

df.describe()

df.isnull().sum()

df['room type'] = df['room type'].fillna(df['room type'].mode())
df['average price'] = df['average price'].fillna(df['average price'].median())



df.duplicated().sum()

df.drop_duplicates(inplace=True)

sns.boxplot(data=df[['number of adults','lead time','average price','number of children']])
plt.show()

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return (data < lower_bound) | (data > upper_bound)

outliers = detect_outliers_iqr(df[['number of adults', 'number of children', 'lead time', 'average price']])
df = df[~outliers.any(axis=1)]

data_encoded = df.copy()

label_encoder = LabelEncoder()
categorical_columns = ['type of meal', 'room type','market segment type', 'booking status']
for col in categorical_columns:
    data_encoded[col] = label_encoder.fit_transform(data_encoded[col])

df=data_encoded

y=df.iloc[:,-1]
x=df.iloc[:,1:-2]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

lr=LogisticRegression(max_iter=10000)

lr.fit(x_train,y_train)

pred=lr.predict(x_test)
acc=accuracy_score(pred,y_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(pred,y_test)

sns.heatmap(confusion_matrix(pred,y_test),annot=True)

rec=recall_score(pred,y_test)


prec=precision_score(pred,y_test)

f1=f1_score(pred,y_test)

print(f"Accuracy of the model is {acc}")
print(f"Reacll of the model is {rec}")
print(f"Precision of the model is {prec}")
print(f"F1-score of the model is {f1}")

